import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

xls_path = "proshares_analysis_data.xlsx"
hedge = pd.read_excel(xls_path, sheet_name="hedge_fund_series")
factors = pd.read_excel(xls_path, sheet_name="merrill_factors")

hedge = hedge.rename(columns={"Unnamed: 0": "Date"})
factors = factors.rename(columns={"Unnamed: 0": "Date"})

target_col = "HFRIFWI Index"
factor_cols = [
    "SPY US Equity", "USGG3M Index", "EEM US Equity",
    "EFA US Equity", "EUO US Equity", "IWM US Equity"
]

df = pd.merge(
    hedge[["Date", target_col]],
    factors[["Date"] + factor_cols],
    on="Date", how="inner"
)
df["Date"] = pd.to_datetime(df["Date"])
df = df.sort_values("Date").dropna(subset=[target_col] + factor_cols).reset_index(drop=True)

# Rolling 60-Month OLS Regression 
window = 60
y = df[target_col].values
X = df[factor_cols].values
pred = np.full(len(df), np.nan)

for t in range(window, len(df)):
    X_train = X[t-window:t, :]
    y_train = y[t-window:t]
    lr = LinearRegression(fit_intercept=True)
    lr.fit(X_train, y_train)
    pred[t] = lr.intercept_ + np.dot(X[t, :], lr.coef_)

df["HFRI_OOS_Pred"] = pred
df_oos = df.dropna(subset=["HFRI_OOS_Pred"]).reset_index(drop=True)

#Performance Metrics
actual = df_oos[target_col].values
predicted = df_oos["HFRI_OOS_Pred"].values

corr = np.corrcoef(actual, predicted)[0, 1]
rmse = np.sqrt(np.mean((actual - predicted) ** 2))
mae = np.mean(np.abs(actual - predicted))
tracking_error = np.std(actual - predicted, ddof=1)
mean_actual, vol_actual = np.mean(actual), np.std(actual, ddof=1)
mean_pred, vol_pred = np.mean(predicted), np.std(predicted, ddof=1)
sharpe_actual = mean_actual / vol_actual
sharpe_pred = mean_pred / vol_pred

print(f"OOS period: {df_oos['Date'].iloc[0]:%Y-%m} â†’ {df_oos['Date'].iloc[-1]:%Y-%m}")
print(f"Correlation: {corr:.3f}")
print(f"RMSE: {rmse:.4f}, MAE: {mae:.4f}, Tracking error: {tracking_error:.4f}")
print(f"Mean Actual: {mean_actual:.4f}, Vol Actual: {vol_actual:.4f}, Sharpe: {sharpe_actual:.3f}")
print(f"Mean Pred:   {mean_pred:.4f}, Vol Pred:   {vol_pred:.4f}, Sharpe: {sharpe_pred:.3f}")

#Plots
plt.figure(figsize=(10,5))
plt.plot(df_oos["Date"], actual, label="HFRI Actual")
plt.plot(df_oos["Date"], predicted, label="Replication OOS")
plt.title("HFRIFWI vs. Out-of-Sample Replication (60-month rolling OLS)")
plt.xlabel("Date"); plt.ylabel("Monthly Return")
plt.legend(); plt.show()

plt.figure(figsize=(6,6))
plt.scatter(actual, predicted, alpha=0.7)
lims = [min(actual.min(), predicted.min()), max(actual.max(), predicted.max())]
plt.plot(lims, lims, 'r--')
plt.title("Predicted vs Actual (HFRIFWI OOS)")
plt.xlabel("Actual"); plt.ylabel("Predicted")
plt.show()
